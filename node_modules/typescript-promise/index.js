"use strict";
var TSPromise = (function () {
    function TSPromise(callFunc, scope) {
        this._callbacks = [];
        this._failed = false;
        this._resolved = false;
        this._settled = false;
        this._scope = scope || this;
        callFunc(this._resolve.bind(this), this._reject.bind(this));
    }
    TSPromise.resolve = function (value) {
        return new TSPromise(function (resolve) { resolve(value); });
    };
    TSPromise.reject = function (error) {
        return new TSPromise(function (resolve, reject) { reject(error); });
    };
    TSPromise.race = function (promises) {
        var complete = false;
        return new TSPromise(function (resolve, reject) {
            promises.forEach(function (p) {
                p.then(function (res) {
                    if (!complete)
                        resolve(res), complete = true;
                }).catch(function (error) {
                    reject(error);
                    complete = true;
                });
            });
        });
    };
    TSPromise.chain = function (promises) {
        var index = 0;
        var resolve;
        var results = [];
        var nextPromise = function (promise) {
            if (index === promises.length) {
                resolve(results);
            }
            else {
                promise.then(function (result) {
                    results.push(result);
                    index++;
                    nextPromise(promises[index]);
                });
            }
        };
        return new TSPromise(function (res) {
            resolve = res;
            nextPromise(promises[index]);
        });
    };
    TSPromise.all = function (promises) {
        return new TSPromise(function (resolve, reject) {
            var count = promises.length;
            var results = [];
            var complete = false;
            promises.forEach(function (p, i) {
                p.then(function (res) {
                    if (!complete) {
                        count--;
                        results[i] = res;
                        if (count === 0)
                            resolve(results);
                    }
                }).catch(function (error) {
                    reject(error);
                    complete = true;
                });
            });
        });
    };
    TSPromise.prototype.done = function (onSuccess, onFail) {
        if (this._settled) {
            setTimeout(this._release.bind(this, onSuccess, onFail), 0);
        }
        else {
            this._callbacks.push({ onSuccess: onSuccess, onFail: onFail });
        }
    };
    TSPromise.prototype.then = function (onSuccess, onFail) {
        var t = this;
        return new TSPromise(function (resolve, reject) {
            t.done(function (value) {
                if (typeof onSuccess === "function") {
                    try {
                        value = onSuccess.apply(t._scope, [value]);
                    }
                    catch (e) {
                        reject(e);
                        return;
                    }
                }
                resolve(value);
            }, function (value) {
                if (typeof onFail === "function") {
                    try {
                        value = onFail.apply(t._scope, [value]);
                    }
                    catch (e) {
                        reject(e);
                        return;
                    }
                    resolve(value);
                }
                else {
                    reject(value);
                }
            });
        }, t._scope);
    };
    TSPromise.prototype.catch = function (onFail) {
        return this.then(null, onFail);
    };
    TSPromise.prototype._release = function (onSuccess, onFail) {
        if (this._failed) {
            onFail(this._value);
        }
        else {
            onSuccess(this._value);
        }
    };
    TSPromise.prototype._resolve = function (value) {
        if (this._resolved)
            return;
        this._resolved = true;
        if (value instanceof TSPromise) {
            value.done(this._settle.bind(this), function (error) {
                this._failed = true;
                this._settle(error);
            }.bind(this));
        }
        else {
            this._settle(value);
        }
    };
    TSPromise.prototype._reject = function (value) {
        if (this._resolved)
            return;
        this._resolved = true;
        this._failed = true;
        this._settle(value);
    };
    TSPromise.prototype._settle = function (value) {
        this._settled = true;
        this._value = value;
        setTimeout(this._callbacks.forEach.bind(this._callbacks, function (data) {
            this._release(data.onSuccess, data.onFail);
        }, this), 0);
    };
    return TSPromise;
}());
exports.TSPromise = TSPromise;
