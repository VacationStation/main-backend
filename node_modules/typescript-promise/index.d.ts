export declare class TSPromise<R> {
    private _scope;
    constructor(callFunc?: (resolve?: Function, reject?: Function) => void, scope?: any);
    static resolve(value: any): TSPromise<any>;
    static reject(error: any): TSPromise<any>;
    static race(promises: Array<TSPromise<any>>): TSPromise<any>;
    static chain(promises: Array<TSPromise<any>>): TSPromise<any>;
    static all(promises: Array<TSPromise<any>>): TSPromise<Array<any>>;
    done(onSuccess: Function, onFail: Function): void;
    then(onSuccess?: Function, onFail?: Function): TSPromise<R>;
    catch(onFail: any): TSPromise<R>;
}
